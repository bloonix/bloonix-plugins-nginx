#!/usr/bin/perl

=head1 NAME

check-nginx - Plugin to check nginx stub-status.

=head1 SYNOPSIS

    check-nginx [ OPTIONS ]

    check-nginx --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2009-2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;

# --------------------------------------------------
# Plugin options
# --------------------------------------------------

my $plugin = Bloonix::Plugin->new(version => "0.4");

$plugin->add_option(
    name => "URL",
    option => "url",
    value => "url",
    value_type => "string",
    mandatory => 1,
    prepare => sub {
        if ($_[0] =~ m@^https{0,1}://[^/]+\z@) {
            $_[0] = "$_[0]/";
        }
    },
    regex => qr@^https{0,1}://[^']+/[^\s']*\z@,
    default => "http://localhost/nginx_status",
    description => "This is the URL to call the server-status of Apache. Please enter the full URL with the query string."
);

$plugin->has_timeout(default => 10);
$plugin->has_threshold(keys => [qw(connections accepts requests reading writing waiting)]);
$plugin->has_auth_basic;
$plugin->has_host;
$plugin->has_use_ipv6;

$plugin->example(
    description => [
        "Simple example:",
        "",
        "- trigger a WARNING if connections higher than 200",
        "- trigger a CRITICAL if connections higher than 300",
    ],
    arguments => [
        url => "http://localhost/nginx_status",
        warning => "connections:ge:200",
        critical => "connections:ge:300"
    ]
);

# --------------------------------------------------
# Parse options
# --------------------------------------------------

my $opt = $plugin->parse_options;
my $curl = "curl --retry 0 --silent";

if ($opt->{url} =~ /^https/) {
    $curl .= " --insecure";
}

if ($opt->{username} && $opt->{password}) {
    $curl .= " --basic --user '$opt->{username}:$opt->{password}'";
}

if ($opt->{use_ipv6}) {
    $curl .= " --ipv6";
}

if ($opt->{host}) {
    my $replace = $opt->{host};
    $opt->{url} =~ m!^(http|https)://(.+?)/!;
    my $proto = $1;
    $opt->{host} = $2;
    if ($opt->{host} =~ s/:(\d+)\z//) {
        $replace .= ":$1";
    }
    $opt->{url} =~ s!^$proto://$opt->{host}/!$proto://$replace/!;
    $curl .= " --header 'Host: $opt->{host}'";
}

# --------------------------------------------------
# load() function to request server-status
# --------------------------------------------------

sub load {
    my ($curl, $url, $timeout) = @_;
    my ($content, %stat, $rest);

    eval {
        $SIG{__DIE__} = sub { alarm(0) };
        $SIG{ALRM} = sub { die "timeout\n" };
        alarm($timeout);
        $content = qx{$curl $url 2>>/dev/null};

        if ($? > 0) {
            my $err = $? >> 8;
            die "curl error code $err\n";
        }

        alarm(0);
    };

    if ($@) {
        if ($@ =~ /^timeout/) {
            $plugin->exit(
                status => "CRITICAL",
                message => "request timed out after $timeout seconds"
            );
        } else {
            my $err = $@;
            chomp($err);
            $err =~ s/\n/ /g;
            $plugin->exit(
                status => "CRITICAL",
                message => $err
            );
        }
    }

    my $rxauto = qr/
        Active\s+connections:\s*(\d+).*
        server\s+accepts\s+handled\s+requests[^\d]*
          (\d+)\s+(\d+)\s+(\d+).*
        Reading:\s+(\d+)\s+Writing:\s+(\d+)\s+Waiting:\s+(\d+)
    /xsi;

    @stat{qw(
        connections
        ttlacc
        ttlhdl
        ttlreq
        reading
        writing
        waiting
    )} = $content =~ $rxauto;

    if (!defined $stat{connections}) {
        $plugin->exit(
            status => "UNKNOWN",
            message => "unable to parse content"
        );
    }

    return \%stat;
}

# --------------------------------------------------
# Load initial statistics
# --------------------------------------------------

my $init = $plugin->load_json;
my $time = undef;

if (defined $init) {
    $time = delete $init->{time};
} else {
    $init = &load($curl, $opt->{url}, $opt->{timeout});
    $time = time;
    sleep 1;
}

# --------------------------------------------------
# Load current statistics
# --------------------------------------------------

my $stat = &load($curl, $opt->{url}, $opt->{timeout});

# --------------------------------------------------
# Calculate deltas
# --------------------------------------------------

my $ntime = time;
my $delta = $ntime - $time;
$delta ||= 1;

if ($init->{ttlacc} > $stat->{ttlacc}) {
    $init->{ttlacc} = 0;
    $init->{ttlhdl} = 0;
    $init->{ttlreq} = 0;
}

if ($stat->{ttlacc}) {
    $stat->{accepts}  = sprintf("%.3f", ($stat->{ttlacc} - $init->{ttlacc}) / $delta);
    $stat->{requests} = sprintf("%.3f", ($stat->{ttlreq} - $init->{ttlreq}) / $delta);
    $stat->{handled}  = sprintf("%.3f", ($stat->{ttlhdl} - $init->{ttlhdl}) / $delta);
} else {
    $stat->{accepts}  = sprintf("%.3f", 0);
    $stat->{requests} = sprintf("%.3f", 0);
    $stat->{handled}  = sprintf("%.3f", 0);
}

# --------------------------------------------------
# Store statistics for the next run
# --------------------------------------------------

$plugin->safe_json({
    time   => $ntime,
    ttlacc => $stat->{ttlacc},
    ttlhdl => $stat->{ttlhdl},
    ttlreq => $stat->{ttlreq}
});

# --------------------------------------------------
# Check warning and critical
# --------------------------------------------------

my $result = $plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(connections accepts handled requests reading writing waiting)]
);

$plugin->exit(
    status => $result->{status},
    message => $result->{upshot},
    stats => $stat
);
